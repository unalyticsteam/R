for (i in 1:n){
suma <- n*(n+1)/2
}
}
funcion()
funcion <- function(){
suma <- 0
n <- readline("Ingrese numero: \n")
for (i in 1:n){
suma <- suma + i
}
}
funcion()
3
funcion <- function(){
suma <- 0
n <- readline("Ingrese numero: \n")
for (i in 1:n){
suma <- suma + i
}
}
funcion()
funcion <- function(){
n <- readline("Ingrese numero: \n")
suma <- 0
for (i in 1:n){
suma <- suma + i
return(suma)
}
}
funcion()
funcion <- function(){
n <- readline("Ingrese numero: \n")
suma <- 0
for (i in 1:n){
suma <- suma + i
suma
}
}
funcion()
1:n
n <- readline("Ingrese numero: \n")
suma <- 0
for (i in 1:n){
suma
1:n
n <-  10
1:n
1:n
1:n
1:n
n <-  10
suma <- 0
for (i in 1:n){
suma <- suma + i
}
suma
n <-  50
suma <- 0
for (i in 1:n){
suma <- suma + i
}
suma
n <-  50
suma <- 0
```{r}
n <-  50
suma <- 0
for (i in 1:n){
suma <- suma + i
}
suma
n <-  100
suma <- 0
for (i in 1:n){
suma <- suma + i
}
suma
```{r}
funcion <- function(){
n <-  readline("ingrese el valor de n: \n")
suma <- 0
for (i in 1:n){
suma <- suma + i
}
paste("El resultado es", suma)
}
# llamado a la función
funcion()
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("villarriba","villabajo"))
x
x<-array(c(45,46,65,55,170,167, 48,49,68,56,169,165), c(2,3,1))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("villarriba","villabajo"))
x
```{r}
x<-array(c(45,46,65,55,170,167, 48,49,68,56,169,165), c(2,3,2))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("villarriba","villabajo"))
x
x<-array(data=c(45,46,65,55,170,167, 48,49,68,56,169,165), dim=c(2,3,2))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("villarriba","villabajo"))
x
x<-array(data=c(45,46,65,55,170,167, 48,49,68,56,169,165), dim=c(2,3,2))
# dim=(2, 3, 4)  --> dim =(número_filas, número_columnas, número_objetos)
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("Medellín","Bogotá"))
x
x[1]
x<-array(data=c(45,46,65,55,170,167, 48,49,68,56,169,165), dim=c(2,3,2))
# dim=(2, 3, 4)  --> dim =(número_filas, número_columnas, número_objetos)
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("Medellín","Bogotá"))
x
x[1]
x[[1]]
x[[[1    ]]]
x<-array(data=c(45,46,65,55,170,167, 48,49,68,56,169,165), dim=c(2,3,2))
# dim=(2, 3, 4)  --> dim =(número_filas, número_columnas, número_objetos)
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("Medellín","Bogotá"))
x
x[1, , 1]
x[1,c(1,2) ,1]
x[1, ,"Medellín"] # x[filas, columas, objeto]
x[ , ,"Medellín"] # x[filas, columas, objeto]
x[ , , ] # x[filas, columas, objeto]
x["hombres" , , ] # x[filas, columas, objeto]
x["mujeres","edad","Bogotá" ]
x<-array(data=c(45,46,65,55,170,167, 48,49,68,56,169,165), dim=c(2,3,2))
#dim=(2, 3, 4)  --> dim =(número_filas, número_columnas, número_objetos)
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("Medellín","Bogotá"))
x
arreglo <- array(c(45,46,65,55,170,167, 48,49,68,56,169,165), (2,3,2))
#dim=(2, 3, 4)  --> dim =(número_filas, número_columnas, número_objetos)
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("Medellín","Bogotá"))
x
arreglo <- array(c(45,46,65,55,170,167, 48,49,68,56,169,165), (2,3,2))
arreglo <- array(c(45,46,65,55,170,167,48,49,68,56,169,165), c(2,3,2))
#dim=(2, 3, 4)  --> dim =(número_filas, número_columnas, número_objetos)
dimnames(arreglo)<-list(c("hombres","mujeres"),c("edad","peso","altura"), c("Medellín","Bogotá"))
arreglo
arreglo["hombres" , , ] # x[filas, columas, objeto]
arreglo[ , ,"Medellín"] # x[filas, columas, objeto]
arreglo["mujeres","edad","Bogotá" ]
james(y1=dt1, y2=dt2, a=0.01, R=1)
# para simular
n1 <-100
n2 <- 100
mu1 <- c(0, 0)
sigma1 <- matrix(c(1, 0.5, 0.5, 1), ncol = 2)
mu2 <- c(1, 1)
sigma2 <- matrix(c(1, -0.5, -0.5, 1 ), ncol = 2)
# simulacion de los datos
library(MASS)
set.seed(123)
dt1 <- mvrnorm(n1, mu=mu1, Sigma=sigma1)
set.seed(123)
dt2 <- mvrnorm(n2, mu=mu2, Sigma=sigma2)
# valorp.
#install.packages("Compositional")
require(Compositional)
james(y1=dt1, y2=dt2, a=0.01, R=1)
# para simular
n1 <-100
n2 <- 100
mu1 <- c(0, 0)
sigma1 <- matrix(c(1, 0.5, 0.5, 1), ncol = 2)
mu2 <- c(1, 1)
sigma2 <- matrix(c(1, -0.5, -0.5, 1 ), ncol = 2)
set.seed(123)
dt1 <- mvrnorm(n1, mu=mu1, Sigma=sigma1)
set.seed(123)
dt2 <- mvrnorm(n2, mu=mu2, Sigma=sigma2)
plot(dt1, pch=19, col='blue', xlim = c(-4,4), ylim = c(-4, 4))
james(y1=dt1, y2=dt2, a=0.1, R=1)
sigma.test.esteban <- function(Sigma, SSigma, n ){
p <- ncol(SSigma)
## calculemos el estadistico.
valoresPorp <- eigen(SSigma%*%solve(Sigma))$values
lambda2 <- vector()
for (i in 1:length(valoresPorp)){
lambda2[i] <- valoresPorp[i]-log(valoresPorp[i])
}
lamda_estadistico1 <- (sum(lambda2)-p)*(n-1)
#valor p (no hay valor critico paso direactamente al valor-p)
pvalue <- pchisq(lamda_estadistico1, df= p*((p+1)/2), lower.tail = F)
#modificacion del test*****
lamda_estadistico2 <- lamda_estadistico1 * (1 - 1/(6*(n-1))*(2*p+1 - 2/(p+1)))
#valop2
pvalue2 <- pchisq(lamda_estadistico2, df= p*((p+1)/2), lower.tail = F)
list(Estadistico=lamda_estadistico1, pvalor=pvalue, Estadistico2 =lamda_estadistico2, pvalor2=pvalue2)
}
help(ifelse)
componente1 <- c(-1,1,2)
componente2 <- c(-4,6,7)
ifelse(componente2 > 0, ifelse(componente1 > 0, "verde", "negro"), "rojo")
c1 <- function(componente1, componente2) ifelse(componente2 > 0, ifelse(componente1 > 0, "verde", "negro"), "rojo")
c1 <- function(componente1, componente2) ifelse(componente2 > 0, ifelse(componente1 > 0, "verde", "negro"), "rojo")
winedf <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"),header=T)
winePCA <- prcomp(scale(winedf[,-1]))
winePCA
componenente1 <- predict(winePCA)[,1]
componente2 <- predict(winePCA)[,2]
c1(componenente1, componente2)
x <- c(-2,0)
y <- c(-4,1)
lm(y ~ x)
x <- c(-4,1)
y <- c(-2,0)
lm(y ~ x)
x <- c(4,1)
y <- c(-2,0)
lm(y ~ x)
x <- c(1/2,1)
y <- c(3,0)
lm(y ~ x)
x <- c(-3,-1,3)
c2 <- function(componente1){
if (componente1 > -4 & componente1 < 1){
y <- (0.4 * componente1) - 0.4
ifelse(componente1 > y, "negro", "rojo")
}
if (componente1 > 1 & componenente1 < 4){
y <- (-0.6667 * componente1) + 0.6667
ifelse(componenente1 > y, "verde", "rojo")
}
}
c2(x)
c2 <- function(componente1, componente2){
if (componente1 > -4 & componente1 < 1){
y <- (0.4 * componente1) - 0.4
ifelse(componente2 > y, "negro", "rojo")
}
if (componente1 > 1 & componenente1 < 4){
y <- (-0.6667 * componente1) + 0.6667
ifelse(componenente2 > y, "verde", "rojo")
}
}
x <- c(-3,-1,3)
y <- c(-4,4,4)
c2 <- function(componente1, componente2){
if (componente1 > -4 & componente1 < 1){
y <- (0.4 * componente1) - 0.4
ifelse(componente2 > y, "negro", "rojo")
}
if (componente1 > 1 & componenente1 < 4){
y <- (-0.6667 * componente1) + 0.6667
ifelse(componenente2 > y, "verde", "rojo")
}
}
c2(x,y)
if (componente1[1] > -4 & componente1[1] < 1){
y <- (0.4 * componente1[1]) - 0.4
ifelse(componente2[1] > y, "negro", "rojo")
}
y
c2 <- function(componente1, componente2){
if (componente1[i] > -4 & componente1[i] < 1){
y <- (0.4 * componente1[i]) - 0.4
ifelse(componente2[i] > y, "negro", "rojo")
}
if (componente1[i] > 1 & componenente1[i] < 4){
y <- (-0.6667 * componente1[i]) + 0.6667
ifelse(componenente2[i] > y, "verde", "rojo")
}
}
c2(x,y)
componente1[1]
c2 <- function(componente1, componente2){
if (componente1[i] > -4 & componente1[i] < 1){
y <- (0.4 * componente1[i]) - 0.4
ifelse(componente2[i] > y, "negro", "rojo")
}
if (componente1[i] > 1 & componenente1[i] < 4){
y <- (-0.6667 * componente1[i]) + 0.6667
ifelse(componenente2[i] > y, "verde", "rojo")
}
}
c2(x,y)
x <- c(-3,-1,3)
y <- c(-4,4,4)
c2 <- function(componente1, componente2){
if (componente1[i] > -4 & componente1[i] < 1){
y <- (0.4 * componente1[i]) - 0.4
ifelse(componente2[i] > y, "negro", "rojo")
}
if (componente1[i] > 1 & componenente1[i] < 4){
y <- (-0.6667 * componente1[i]) + 0.6667
ifelse(componenente2[i] > y, "verde", "rojo")
}
}
c2(x,y)
c2 <- function(componente1, componente2){
if (componente1 > -4 & componente1 < 1){
y <- (0.4 * componente1) - 0.4
ifelse(componente2 > y, "negro", "rojo")
}
if (componente1 > 1 & componenente1 < 4){
y <- (-0.6667 * componente1) + 0.6667
ifelse(componenente2 > y, "verde", "rojo")
}
}
c2(x,y)
c2 <- function(componente1, componente2){
if (componente1 > -4 & componente1 < 1){
y <- (0.4 * componente1) - 0.4
ifelse(componente2 > y, "negro", "rojo")
}
if (componente1 > 1 & componente1 < 4){
y <- (-0.6667 * componente1) + 0.6667
ifelse(componenente2 > y, "verde", "rojo")
}
}
c2(componente1 = x,componente2 = y)
c2 <- function(componente1, componente2){
for (i in 1:length(componente1)) {
if (componente1[i] > -4 & componente1[i] < 1){
y <- (0.4 * componente1[i]) - 0.4
ifelse(componente2[i] > y, "negro", "rojo")
}
if (componente1[i] > 1 & componente1[i] < 4){
y <- (-0.6667 * componente1[i]) + 0.6667
ifelse(componenente2[i] > y, "verde", "rojo")
}
}
}
c2(componente1 = x,componente2 = y)
c2 <- function(componente1, componente2){
for (i in 1:length(componente1)) {
if (componente1[i] > -4 & componente1[i] < 1){
y <- (0.4 * componente1[i]) - 0.4
ifelse(componente2[i] > y, "negro", "rojo")
}
if (componente1[i] > 1 & componente1[i] < 4){
y <- (-0.6667 * componente1[i]) + 0.6667
ifelse(componente2[i] > y, "verde", "rojo")
}
}
}
c2(componente1 = x,componente2 = y)
c2 <- function(componente1, componente2){
for (i in 1:length(componente1)) {
if (componente1[i] > -4 & componente1[i] < 1){
y <- (0.4 * componente1[i]) - 0.4
s <- ifelse(componente2[i] > y, "negro", "rojo")
print(s)
}
if (componente1[i] > 1 & componente1[i] < 4){
y <- (-0.6667 * componente1[i]) + 0.6667
s1 <- ifelse(componente2[i] > y, "verde", "rojo")
print(s1)
}
}
}
c2(componente1 = x,componente2 = y)
c2(componente1,componente2)
winedf <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"),header=T)
winePCA <- prcomp(scale(winedf[,-1]))
componenente1 <- predict(winePCA)[,1]
componente2 <- predict(winePCA)[,2]
c2(componente1,componente2)
componente1 <- predict(winePCA)[,1]
c2(componente1,componente2)
str(img_list)
require(magick)
#Obtener las rutas de cada imagen
glassImages <- list.files(path = "faces", recursive = TRUE, full.names = TRUE, pattern = ".*[.]pgm")
#cargar la lista de imagenes
img_list <- lapply(glassImages, image_read)
#convertir cada imagen en matriz
matriz_imagen <- lapply(img_list, image_data)
#saber si la imagen es o no con gafas. Si usa_gafas[x] es true, entonces la persona de la imagen matriz_imagen[[x]] tiene gafas de sol
usa_gafas <- grepl(".*glasses.*",glassImages)
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[25]])
#tambien puede ver las imagenes directamente de la primera lista, si aun esta en memoria:
img_list[[25]]
#mostrar imagenes con gafas de sol
for(i in 1:length(usa_gafas)){
if(usa_gafas[i]){
print(img_list[[i]])
}
}
#mostrar imagenes sin gafas de sol (puede usar gafas recetadas)
for(i in 1:length(usa_gafas)){
if(! usa_gafas[i]){
print(img_list[[i]])
}
}
# Hagamos un modelo de predicción sobre una lista
library("keras")
model <- keras_model_sequential()
str(img_list)
require(magick)
#Obtener las rutas de cada imagen
glassImages <- list.files(path = "faces", recursive = TRUE, full.names = TRUE, pattern = ".*[.]pgm")
#cargar la lista de imagenes
img_list <- lapply(glassImages, image_read)
#convertir cada imagen en matriz
matriz_imagen <- lapply(img_list, image_data)
#saber si la imagen es o no con gafas. Si usa_gafas[x] es true, entonces la persona de la imagen matriz_imagen[[x]] tiene gafas de sol
usa_gafas <- grepl(".*glasses.*",glassImages)
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[25]])
#tambien puede ver las imagenes directamente de la primera lista, si aun esta en memoria:
img_list[[25]]
#mostrar imagenes con gafas de sol
for(i in 1:length(usa_gafas)){
if(usa_gafas[i]){
print(img_list[[i]])
}
}
#Obtener las rutas de cada imagen
glassImages <- list.files(path = "faces", recursive = TRUE, full.names = TRUE, pattern = ".*[.]pgm")
#cargar la lista de imagenes
img_list <- lapply(glassImages, image_read)
img_list
#convertir cada imagen en matriz
matriz_imagen <- lapply(img_list, image_data)
#saber si la imagen es o no con gafas. Si usa_gafas[x] es true, entonces la persona de la imagen matriz_imagen[[x]] tiene gafas de sol
usa_gafas <- grepl(".*glasses.*",glassImages)
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[25]])
matriz_imagen
#convertir cada imagen en matriz
matriz_imagen <- lapply(img_list, image_data)
#saber si la imagen es o no con gafas. Si usa_gafas[x] es true, entonces la persona de la imagen matriz_imagen[[x]] tiene gafas de sol
usa_gafas <- grepl(".*glasses.*",glassImages)
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[25]])
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[5]])
#tambien puede ver las imagenes directamente de la primera lista, si aun esta en memoria:
img_list[[25]]
#mostrar imagenes con gafas de sol
for(i in 1:length(usa_gafas)){
if(usa_gafas[i]){
print(img_list[[i]])
}
}
#mostrar imagenes sin gafas de sol (puede usar gafas recetadas)
for(i in 1:length(usa_gafas)){
if(! usa_gafas[i]){
print(img_list[[i]])
}
}
#cargar la lista de imagenes
img_list <- lapply(glassImages, image_read)
#convertir cada imagen en matriz
matriz_imagen <- lapply(img_list, image_data)
#saber si la imagen es o no con gafas. Si usa_gafas[x] es true, entonces la persona de la imagen matriz_imagen[[x]] tiene gafas de sol
usa_gafas <- grepl(".*glasses.*",glassImages)
usa_gafas
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[5]])
magick::image_read(matriz_imagen[[5]])
require(magick)
#Obtener las rutas de cada imagen
glassImages <- list.files(path = "faces", recursive = TRUE, full.names = TRUE, pattern = ".*[.]pgm")
#cargar la lista de imagenes
img_list <- lapply(glassImages, image_read)
#convertir cada imagen en matriz
matriz_imagen <- lapply(img_list, image_data)
#saber si la imagen es o no con gafas. Si usa_gafas[x] es true, entonces la persona de la imagen matriz_imagen[[x]] tiene gafas de sol
usa_gafas <- grepl(".*glasses.*",glassImages)
#nota: para ver la matriz 5 como imagen, puede usar:
magick::image_read(matriz_imagen[[5]])
#tambien puede ver las imagenes directamente de la primera lista, si aun esta en memoria:
img_list[[25]]
shiny::runApp('C:/Users/Esteban Bermúdez/Desktop/Images (1)/image_classifier-master')
install.packages("h5py")
install.packages("reticulate")
install.packages("tensorflow")
install.packages("keras")
install.packages("reticulate")
install.packages("h5py")
devtools::install_github("decryptr/decryptr")
install.packages("h5py")
shiny::runApp('C:/Users/Esteban Bermúdez/Desktop/Images (1)/image_classifier-master')
runApp('C:/Users/Esteban Bermúdez/Desktop/Images (1)/image_classifier-master')
library(gamlss)
help(gamlss)
# tablas en html
library(XML)
setwd("C:/Users/Esteban Bermúdez/Desktop/unalytics/scripts-R")
url <- "../bases-de-datos/WorldPopulation-wiki.htm"
tablas <- readHTMLTable(url)
library(XML)
url <- "../bases-de-datos/WorldPopulation-wiki.htm"
tablas <- readHTMLTable(url)
View(tablas)
tablas[[2]]
tabla2 <- tablas[[2]]
View(tabla2)
tablas <- readHTMLTable(url, which = 6)
View(tablas)
library(rvest)
url <- "https://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature"
peliculas <- read_html(url)
peliculas
View(peliculas)
nodos_tiulos <- html_nodes(peliculas,".lister-item-header a")
nodos_tiulos
titulos <- html_text(nodos_tiulos)
titulos
titulo2 <- peliculas %>% html_nodes(".lister-item-header a") %>% html_text()
titulo2
rank <- peliculas %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
rank
rank <- peliculas %>% html_nodes(".ratings-imdb-rating strong") %>% html_text() %>% as.numeric()
rank
rank
base <- data.frame(titulo2, rank)
base
View(base)
